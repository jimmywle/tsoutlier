tsm<-ts(t_c)
result<-tso(tsm)
tsm
result<-tso(tsm)
result<-tso(tsm,maxit.iloop = 1)
t_c<- zoo::zoo(dat[,2], order.by=dat[,1])
tsm<-ts(t_c)
result<-tso(tsm,maxit.iloop = 1)
dat
outlier_detection<- function(y, xreg = NULL, cval = NULL, delta = 0.7, n.start = 50,
types = c("AO", "LS", "TC"), # c("IO", "AO", "LS", "TC", "SLS")
maxit = 1, maxit.iloop = 4, cval.reduce = 0.14286,
remove.method = c("en-masse", "bottom-up"),
remove.cval = NULL,
tsmethod = c("auto.arima", "arima", "stsm"),
args.tsmethod = NULL, args.tsmodel = NULL, logfile = NULL)
{
tsmethod <- match.arg(tsmethod)
remove.method <- match.arg(remove.method)
attr.y <- attributes(y)
n <- length(y)
yname <- deparse(substitute(y))
#stopifnot(is.ts(y))
if (!is.null(args.tsmethod$xreg))
{
xreg <- args.tsmethod$xreg
args.tsmethod$xreg <- NULL # this removes element "xreg" from the list
}
if (tsmethod == "stsm")
{
if (is.null(args.tsmodel$model))
args.tsmodel$model <- ifelse(frequency(y) == 1, "local-level", "BSM")
##FIXME these defaults only if stsm.method = "maxlik.fd.scoring"
if (is.null(args.tsmodel$ssd))
args.tsmodel$ssd <- TRUE
if (is.null(args.tsmodel$sgfc))
args.tsmodel$sgfc <- TRUE
# let "stsm::stsmFit" handle "xreg", not here
y <- do.call("stsm.model", args = c(list(y = y), args.tsmodel))
#ylist <- list(m = m)
}
if (is.null(args.tsmethod))
{
args.tsmethod <- switch(tsmethod,
"auto.arima" = list(allowdrift = FALSE, ic = "bic"),
"arima" = list(order = c(0, 1, 1), seasonal = list(order = c(0, 1, 1))),
"stsm" = list(stsm.method = "maxlik.td.optim", method = "L-BFGS-B",
KF.version = "KFKSDS", KF.args = list(P0cov = TRUE), gr = "numerical")) #hessian = TRUE
#list(stsm.method = "maxlik.fd.scoring", step = NULL, information = "expected"))
}
# default critical value
# the same is done in functions "locate.outliers.oloop" and "remove.outliers"
# "cval" is passed as a non-null value from tso() to those functions
# but keep there this block so that default value is used when those functions
# are called outside tso()
if (is.null(cval))
{
#n <- length(y)
if (n <= 50) {
cval <- 3
} else
if (n >= 450) {
cval <- 4
} else
cval <- round(3 + 0.0025 * (n - 50), 2)
}
cval0 <- cval
if (is.null(remove.cval))
remove.cval <- cval
# "res0" is used below to generate the output,
# "res" is overwritten until no more outliers are found
# "res0" is also used if maxit = 1
res0 <- res <- tso0(x = y, xreg = xreg, cval = cval,
delta = delta, n.start = n.start,
types = types, maxit.iloop = maxit.iloop,
remove.method = remove.method, remove.cval = remove.cval,
tsmethod = tsmethod, args.tsmethod = args.tsmethod,
logfile = logfile)
fit.wo.outliers <- res$fit0 # model without outliers (if maxit>1 res0 may change)
moall <- res$outliers
outtimes <- res$times
iter <- 1
cval <- round(cval * (1 - cval.reduce), 2)
if (nrow(moall) > 1)
while (iter < maxit)
{
##FIXME see move res0 <- res after if(...) break
if (tsmethod == "stsm")
{
##FIXME TODO create stsm object based on res$yadj as done above
warning("currently ", sQuote("maxit"), " > 1 is not allowed for ", sQuote("tsmethod=\"stsm\""))
break
}
# save "res" to have a copy of the last fitted model, res$fit;
# if in the current run no outliers are found then
# tso0() does not return the fitted model
res0 <- res
res <- tso0(x = res$yadj, xreg = xreg, cval = cval,
delta = delta, n.start = n.start,
types = types, maxit.iloop = maxit.iloop,
remove.method = remove.method, remove.cval = remove.cval,
tsmethod = tsmethod, args.tsmethod = args.tsmethod,
logfile = logfile)
##FIXME check
#discard (remove) duplicates and outliers at consecutive type points (if any)
#
#do not discard according to abs(t-stat) because the detection of outliers
#are based on res$yadj (not the original series); discarding an outlier
#from a previous iteration would require changing the current res$yadj
#
#discard outliers at an observation where an outlier (of the same or other type)
#was detected in a previous iteration
id <- which(res$outliers[,"ind"] %in% res0$outliers[,"ind"])
if (length(id) > 0)
res$outliers <- res$outliers[id,]
#discard consecutive outliers of any type, keep the outlier from previous iterations
id <- which(apply(outer(res$outliers[,"ind"], res0$outliers[,"ind"], "-"), MARGIN=1,
FUN = function(x) any(x == 1)))
if (length(id) > 0)
res$outliers <- res$outliers[id,]
if (nrow(res$outliers) == 0)
break
moall <- rbind(moall, res$outliers)
outtimes <- c(outtimes, res$times)
iter <- iter + 1
}
# final model given the detected outliers
######################################################################
if (nrow(moall) > 0)
{
#NOTE 'pars' is relevant only for innovational outliers,
#when 'maxit'>1, see if it would be better to use 'res' instead of 'res0',
#preferably it should be based on 'pars' from a model for the original data
#rather than the series adjusted for outliers
pars <- switch(tsmethod,
"auto.arima" = , "arima" = coefs2poly(res0$fit),
"stsm" = stsm::char2numeric(res0$fit$model))
# 'xreg': input regressor variables such as calendar effects (if any)
# 'xreg.outl': outliers regressor variables detected above (if any)
# 'xregall': all regressors ('xreg' and 'xreg.outl')
xreg.outl <- outliers.effects(mo = moall, n = n, weights = FALSE, delta = delta,
pars = pars, n.start = n.start, freq = frequency(y))
xregall <- cbind(xreg, xreg.outl)
nms.outl <- colnames(xreg.outl)
colnames(xregall) <- c(colnames(xreg), nms.outl)
##NOTE
# rerunning "auto.arima" (model selection) may not be necessary at this point
if (tsmethod == "stsm") {
fit <- do.call("stsmFit", args = c(list(x = y, xreg = xregall), args.tsmethod))
} else {
fit <- do.call(tsmethod, args = c(list(x = y, xreg = xregall), args.tsmethod))
# this is for proper printing of results from "auto.arima" and "arima"
fit$series <- yname
}
id <- colnames(xreg.outl)
if (tsmethod == "stsm")
{
xregcoefs <- fit$pars[id]
tstats <- xregcoefs / fit$std.errors[id]
} else { # method "auto.arima", "arima"
xregcoefs <- coef(fit)[id]
tstats <- xregcoefs / sqrt(diag(fit$var.coef)[id])
}
moall[,"coefhat"] <- xregcoefs
moall[,"tstat"] <- tstats
}
moall
}
tso
tsm
dat<-read.csv("/Users/kartikeya kirar/Downloads/jimmy/d2.csv",sep = "\t")
dat[,1]<-as.Date(as.character(dat[,1]), format='%Y%m%d')
t_c<- timeseries_conversion(dat[,2], order.by=dat[,1])
t_c<- zoo::zoo(dat[,2], order.by=dat[,1])
tsm
tsm<-ts(t_c)
result<-tso(tsm,maxit.iloop = 1)
result$outliers
result<-tso(tsm)
result$outliers
?tso
tso(tsm,maxit.iloop = 1)
library(tsoutlier)
algorithm(dat)
library(forecast)
library(tsoutliers)
library(timeSeries)
algorithm(dat)
library(tsoutlier)
library("tsoutliers", lib.loc="~/R/win-library/3.3")
library("forecast", lib.loc="~/R/win-library/3.3")
library("timeSeries", lib.loc="~/R/win-library/3.3")
library("zoo", lib.loc="~/R/win-library/3.3")
ac<-algorithm(dat)
View(ac)
library(ggplot2)
tmp<-ac
plot_dia<-ggplot(tmp,aes(Date))+
geom_line(data = tmp,aes(Date,Predicted),size=2,col="steelblue")+
geom_point(data = tmp,aes(Date,Actual,col=Sensitivity))+
geom_ribbon(aes(ymin=lowerOffOutlierLimit,ymax=upperOffOutlierLimit),alpha=.25,fill="steelblue")+
labs(title='Outlier Detection')+
theme(axis.text= element_text(face = "bold",size = 7.5)     ,
axis.title.y =element_blank() ,
axis.title.x =element_blank() ,
plot.title = element_text(size =11, face = "bold") ,
plot.subtitle = element_text(size = 12),legend.position = "None"
)+
scale_color_manual(values=c("0" = "#333BFF", "outlier" = "#CC6600"))
plot_dia
ggplot(tmp,aes(Date))+
geom_line(data = tmp,aes(Date,Predicted),size=2,col="steelblue")+
geom_point(data = tmp,aes(Date,Actual,col=Sensitivity))+
geom_ribbon(aes(ymin=lowerOffOutlierLimit,ymax=upperOffOutlierLimit),alpha=.25,fill="steelblue")+
labs(title='Outlier Detection')
View(ac)
2751*.25
2751+
2751*.25
View(dat)
tmp<-ac
class(ac)
View(ac)
input<-dat
input[,2]<-as.numeric(input[,2])
dat<-input
if(nchar(dat[,1][1])>10){
seq_len<-nrow(dat)
input[,1]<-seq(as.Date("2000/1/1"), by = "day", length.out = seq_len)
input[,1]<-as.Date(as.character(input[,1]), format='%Y-%m-%d')
dat[,1]<-as.POSIXct(dat[,1])
}else {
dat[,1]<-as.Date(as.character(dat[,1]), format='%Y-%m-%d')
dat<-dat[order(dat[,1]),]
}
t_c<- timeseries_conversion(input[,2], order.by=input[,1])
tsm<-timeseries(t_c)
tsm
indx <- 1:length(dat[,1])
var.use <- dat[,2]
lo <- loess(var.use~indx)
predicted<-predict(lo)
temp<-var.use
temp
result<-tso(tsm,maxit.iloop = 1)
analysis<-result$outliers
analysis
nrow(analysis)!=0
result$yadj[result$times]
dat[,2][result$times]
class(dat[,2][result$times])
class(result$yadj[result$times])
dat[,2][result$times]<-result$yadj[result$times]
outlier<-list()
outlier[1:length(dat[,1])]<-0
outlier[analysis$ind]<-1
outlier
raw_limit<-sum(abs(var.use-dat[,2])/var.use)/length(result$times)
limit<-raw_limit*0.5
raw_limit
limit
chk<-unique((var.use-dat[,2])/var.use)[-1]
chk
if(sum(chk<limit)==0){
limit_s<-limit*0.5
} else{
limit<-limit*0.75
limit_s<-limit*0.5
}
if(sum(chk<limit)!=0){
limit<-limit*0.75
limit_s<-limit*0.75
}
limit
limit_s
temp<-dat[,2]
temp
temp +(temp*limit)/100
temp +(temp*limit)
View(temp +(temp*limit)/100,temp +(temp*limit))
View(cbind(temp +(temp*limit)/100,temp +(temp*limit)))
View(cbind(temp +(temp*limit)/100,input[,2],dat[,2],temp +(temp*limit),unlist(oulier)))
View(cbind(temp +(temp*limit)/100,input[,2],dat[,2],temp +(temp*limit),unlist(outlier)))
if(nrow(analysis)!=0){
dat[,2][result$times]<-result$yadj[result$times]
outlier<-list()
outlier[1:length(dat[,1])]<-0
outlier[analysis$ind]<-1
raw_limit<-sum(abs(var.use-dat[,2])/var.use)/length(result$times)
limit<-raw_limit*0.5
chk<-unique((var.use-dat[,2])/var.use)[-1]
if(sum(chk<limit)==0){
limit_s<-limit*0.5
} else{
limit<-limit*0.75
limit_s<-limit*0.5
}
if(sum(chk<limit)!=0){
limit<-limit*0.75
limit_s<-limit*0.75
}
temp<-dat[,2]
tmp<-data.frame(dat[,1],predicted,var.use,dat[,2],temp +(temp*limit)/100 ,temp -(temp*limit)/100,temp +(temp*limit_s[5]*2)/100 ,temp -(temp*limit_s[5]*2)/100,unlist(outlier))
} else{
temp<-dat[,2]
outlier<-list()
outlier[1:length(dat[,1])]<-0
limit<-0.5
limit_s<-limit*0.6
tmp<-data.frame(dat[,1],predicted,var.use,temp +(temp*limit)/100 ,temp -(temp*limit)/100,temp +(temp*limit_s[5]*2)/100 ,temp -(temp*limit_s[5]*2)/100,unlist(outlier))
}
if(nrow(analysis)!=0){
dat[,2][result$times]<-result$yadj[result$times]
outlier<-list()
outlier[1:length(dat[,1])]<-0
outlier[analysis$ind]<-1
raw_limit<-sum(abs(var.use-dat[,2])/var.use)/length(result$times)
limit<-raw_limit*0.5
chk<-unique((var.use-dat[,2])/var.use)[-1]
if(sum(chk<limit)==0){
limit_s<-limit*0.5
} else{
limit<-limit*0.75
limit_s<-limit*0.5
}
if(sum(chk<limit)!=0){
limit<-limit*0.75
limit_s<-limit*0.75
}
temp<-dat[,2]
tmp<-data.frame(dat[,1],predicted,var.use,dat[,2],temp +(temp*limit) ,temp -(temp*limit),temp +(temp*limit_s),temp -(temp*limit_s),unlist(outlier))
} else{
temp<-dat[,2]
outlier<-list()
outlier[1:length(dat[,1])]<-0
limit<-0.5
limit_s<-limit*0.6
tmp<-data.frame(dat[,1],predicted,var.use,temp +(temp*limit) ,temp -(temp*limit),temp +(temp*limit_s),temp -(temp*limit_s),unlist(outlier))
}
View(tmp)
colnames(tmp)<-c("Date","Predicted","Actual","upperOffOutlierLimit","lowerOffOutlierLimit","upperSafe3rdQuantLimit","lowerSafe3rdQuantLimit","Sensitivity")
library(tsoutlier)
dat
tmp<-tsoutlier::algorithm(dat)
algorithm(dat)
ac<-read.csv("/Users/kartikeya kirar/Downloads/jimmy/d2.csv",sep = "\t")
tmp<-tsoutlier::algorithm(ac)
tmp<-tsoutlier::algorithm(ac)
library(tsoutlier)
tmp<-tsoutlier::algorithm(ac)
View(tmp)
ac[,1]
tmp<-tsoutlier::algorithm(ac)
library(tsoutlier)
tmp<-tsoutlier::algorithm(ac)
.libPaths()
with_libpaths(new = "/usr/lib/R/library", install_github('tsoutlier', 'kartikeyakirar'))
library(devtools)
with_libpaths(new = "/usr/lib/R/library", install_github('tsoutlier', 'kartikeyakirar'))
library(tsoutlier)
tmp<-tsoutlier::algorithm(ac)
ggplot(tmp,aes(Date))+
geom_line(data = tmp,aes(Date,Predicted),size=2,col="steelblue")+
geom_point(data = tmp,aes(Date,Actual,col=Sensitivity))+
geom_ribbon(aes(ymin=lowerOffOutlierLimit,ymax=upperOffOutlierLimit),alpha=.25,fill="steelblue")+
labs(title='Outlier Detection')
dat[,1]<-as.Date(as.character(dat[,1]), format='%Y-%m-%d')
tmp[,1]<-as.Date(as.character(tmp[,1]), format='%Y%m%d')
ggplot(tmp,aes(Date))+
geom_line(data = tmp,aes(Date,Predicted),size=2,col="steelblue")+
geom_point(data = tmp,aes(Date,Actual,col=Sensitivity))+
geom_ribbon(aes(ymin=lowerOffOutlierLimit,ymax=upperOffOutlierLimit),alpha=.25,fill="steelblue")+
labs(title='Outlier Detection')
library(tsoutlier)
tmp[,1]<-as.Date(as.character(tmp[,1]), format='%Y%m%d')
tmp<-tsoutlier::algorithm(ac)
tmp[,1]<-as.Date(as.character(tmp[,1]), format='%Y%m%d')
ggplot(tmp,aes(Date))+
geom_line(data = tmp,aes(Date,Predicted),size=2,col="steelblue")+
geom_point(data = tmp,aes(Date,Actual,col=Sensitivity))+
geom_ribbon(aes(ymin=lowerOffOutlierLimit,ymax=upperOffOutlierLimit),alpha=.25,fill="steelblue")+
labs(title='Outlier Detection')
ggplot(tmp,aes(Date))+
geom_line(data = tmp,aes(Date,Predicted),size=2,col="steelblue")+
geom_point(data = tmp,aes(Date,Actual,col=Sensitivity))+
geom_ribbon(aes(ymin=lowerOffOutlierLimit,ymax=upperOffOutlierLimit),alpha=.25,fill="steelblue")+
labs(title='Outlier Detection')
y<-tmp
y<-tmp[,1:5]
y$ck<-(y$Predicted+y$Predicted*0.3)
View(y)
tmp[tmp$Sensitivity!=1,]
y<-tmp[tmp$Sensitivity!=1,]
y$Predicted-y$Actual
abs(y$Predicted-y$Actual)/y$Predicted
max(abs(y$Predicted-y$Actual)/y$Predicted)
w<-max(abs(y$Predicted-y$Actual)/y$Predicted)
y<-tmp[,1:5]
y$ck<-(y$Predicted+y$Predicted*w)
y$ck1<-(y$Predicted-y$Predicted*w)
tmp<-tsoutlier::algorithm(ac[300:350,])
tmp<-tsoutlier::algorithm(ac[300:350,])
tmp[,1]<-as.Date(as.character(tmp[,1]), format='%Y%m%d')
q<-tmp[tmp$Sensitivity!=1,]
w<-max(abs(q$Predicted-q$Actual)/q$Predicted)
w
y<-tmp[,1:5]
y$ck<-(y$Predicted+y$Predicted*w)
y$ck1<-(y$Predicted-y$Predicted*w)
ggplot(tmp,aes(Date))+
geom_line(data = tmp,aes(Date,Predicted),size=2,col="steelblue")+
geom_point(data = tmp,aes(Date,Actual,col=Sensitivity))+
geom_ribbon(aes(ymin=lowerOffOutlierLimit,ymax=upperOffOutlierLimit),alpha=.25,fill="steelblue")+
labs(title='Outlier Detection')
library(tsoutlier)
tmp<-tsoutlier::algorithm(ac)
tmp[,1]<-as.Date(as.character(tmp[,1]), format='%Y%m%d')
q<-tmp[tmp$Sensitivity!=1,]
w<-max(abs(q$Predicted-q$Actual)/q$Predicted)
y<-tmp[,1:5]
y$ck<-(y$Predicted+y$Predicted*w)
y$ck1<-(y$Predicted-y$Predicted*w)
ggplot(tmp,aes(Date))+
geom_line(data = tmp,aes(Date,Predicted),size=2,col="steelblue")+
geom_point(data = tmp,aes(Date,Actual,col=Sensitivity))+
geom_ribbon(aes(ymin=lowerOffOutlierLimit,ymax=upperOffOutlierLimit),alpha=.25,fill="steelblue")+
labs(title='Outlier Detection')
ggplot(y,aes(Date))+
geom_line(data = y,aes(Date,Predicted),size=2,col="steelblue")+
geom_point(data = y,aes(Date,Actual,col=Sensitivity))+
geom_ribbon(aes(ymin=ck,ymax=ck),alpha=.25,fill="steelblue")+
labs(title='Outlier Detection')
y$sen<-tmp$Sensitivity
ggplot(y,aes(Date))+
geom_line(data = y,aes(Date,Predicted),size=2,col="steelblue")+
geom_point(data = y,aes(Date,Actual,col=sen))+
geom_ribbon(aes(ymin=ck,ymax=ck),alpha=.25,fill="steelblue")+
labs(title='Outlier Detection')
ggplot(y,aes(Date))+
geom_line(data = y,aes(Date,Predicted),size=2,col="steelblue")+
geom_point(data = y,aes(Date,Actual,col=sen))+
geom_ribbon(aes(ymin=ck,ymax=ck1),alpha=.25,fill="steelblue")+
labs(title='Outlier Detection')
tmp<-tsoutlier::algorithm(ac[300:350,])
tmp[,1]<-as.Date(as.character(tmp[,1]), format='%Y%m%d')
q<-tmp[tmp$Sensitivity!=1,]
w<-max(abs(q$Predicted-q$Actual)/q$Predicted)
y<-tmp[,1:5]
y$ck<-(y$Predicted+y$Predicted*w)
y$ck1<-(y$Predicted-y$Predicted*w)
y$sen<-tmp$Sensitivity
ggplot(tmp,aes(Date))+
geom_line(data = tmp,aes(Date,Predicted),size=2,col="steelblue")+
geom_point(data = tmp,aes(Date,Actual,col=Sensitivity))+
geom_ribbon(aes(ymin=lowerOffOutlierLimit,ymax=upperOffOutlierLimit),alpha=.25,fill="steelblue")+
labs(title='Outlier Detection')
ggplot(y,aes(Date))+
geom_line(data = y,aes(Date,Predicted),size=2,col="steelblue")+
geom_point(data = y,aes(Date,Actual,col=sen))+
geom_ribbon(aes(ymin=ck,ymax=ck1),alpha=.25,fill="steelblue")+
labs(title='Outlier Detection')
ggplot(tmp,aes(Date))+
geom_line(data = tmp,aes(Date,Predicted),size=2,col="steelblue")+
geom_point(data = tmp,aes(Date,Actual,col=Sensitivity))+
geom_ribbon(aes(ymin=lowerOffOutlierLimit,ymax=upperOffOutlierLimit),alpha=.25,fill="steelblue")+
labs(title='Outlier Detection')
ggplot(tmp,aes(Date))+
#geom_line(data = tmp,aes(Date,Predicted),size=2,col="steelblue")+
geom_line(data = tmp,aes(Date,Actual,col=Sensitivity))+
geom_ribbon(aes(ymin=lowerOffOutlierLimit,ymax=upperOffOutlierLimit),alpha=.25,fill="steelblue")+
labs(title='Outlier Detection')
ggplot(tmp,aes(Date))+
geom_point(data = tmp,aes(Date,Actual),size=2,col="steelblue")+
geom_line(data = tmp,aes(Date,Actual,col=Sensitivity))+
geom_ribbon(aes(ymin=lowerOffOutlierLimit,ymax=upperOffOutlierLimit),alpha=.25,fill="steelblue")+
labs(title='Outlier Detection')
ggplot(tmp,aes(Date))+
geom_point(data = tmp,aes(Date,Actual),size=2,col=Sensitivity)+
geom_line(data = tmp,aes(Date,Actual,col=Sensitivity))+
geom_ribbon(aes(ymin=lowerOffOutlierLimit,ymax=upperOffOutlierLimit),alpha=.25,fill="steelblue")+
labs(title='Outlier Detection')
ggplot(tmp,aes(Date))+
geom_point(data = tmp,aes(Date,Actual,size=2,col=Sensitivity))+
geom_line(data = tmp,aes(Date,Actual,col=Sensitivity))+
geom_ribbon(aes(ymin=lowerOffOutlierLimit,ymax=upperOffOutlierLimit),alpha=.25,fill="steelblue")+
labs(title='Outlier Detection')
ggplot(tmp,aes(Date))+
geom_point(data = tmp,aes(Date,Actual,size=1,col=Sensitivity))+
geom_line(data = tmp,aes(Date,Actual,col=Sensitivity))+
geom_ribbon(aes(ymin=lowerOffOutlierLimit,ymax=upperOffOutlierLimit),alpha=.25,fill="steelblue")+
labs(title='Outlier Detection')
result<-tso(tsm,maxit.iloop = 1,maxit.oloop=1)
?tso
tmp<-tsoutlier::algorithm(ac[300:350,])
tmp[,1]<-as.Date(as.character(tmp[,1]), format='%Y%m%d')
q<-tmp[tmp$Sensitivity!=1,]
w<-max(abs(q$Predicted-q$Actual)/q$Predicted)
y<-tmp[,1:5]
y$ck<-(y$Predicted+y$Predicted*w)
y$ck1<-(y$Predicted-y$Predicted*w)
y$sen<-tmp$Sensitivity
ggplot(tmp,aes(Date))+
geom_line(data = tmp,aes(Date,Predicted),size=2,col="steelblue")+
geom_point(data = tmp,aes(Date,Actual,col=Sensitivity))+
geom_ribbon(aes(ymin=lowerOffOutlierLimit,ymax=upperOffOutlierLimit),alpha=.25,fill="steelblue")+
labs(title='Outlier Detection')
View(tmp)
ggplot(tmp,aes(Date))+
geom_line(data = tmp,aes(Date,Predicted),size=2,col="steelblue")+
geom_point(data = tmp,aes(Date,Actual,col=Sensitivity))+
geom_ribbon(aes(ymin=lowerOffOutlierLimit,ymax=upperOffOutlierLimit),alpha=.25,fill="steelblue")+geom_ribbon(aes(ymin=lowerSafe3rdQuantLimit,ymax=upperSafe3rdQuantLimit),alpha=.25,fill="steelblue")+
labs(title='Outlier Detection')
